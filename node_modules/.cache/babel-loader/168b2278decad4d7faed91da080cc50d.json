{"ast":null,"code":"/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nexport const isLoading = _ref => {\n  let {\n    loading,\n    data,\n    numOfRenders,\n    options\n  } = _ref;\n\n  // If first render\n  if (numOfRenders === 1) {\n    // and defer is true\n    if (options.defer) {\n      // isLoading should be false\n      return false;\n    } // and no data exists and presume loading state isn't present\n\n\n    if (!data) {\n      // isLoading should be true\n      return true;\n    }\n  } // If not on first render and loading from cache is true\n\n\n  if (loading) {\n    // isLoading should be true\n    return true;\n  } // else isLoading should be false\n\n\n  return false;\n};\nexport const coerceSsrField = field => {\n  if (!field) {\n    return null;\n  }\n\n  if (field instanceof Error) {\n    var _field$toString;\n\n    return (_field$toString = field.toString) === null || _field$toString === void 0 ? void 0 : _field$toString.call(field);\n  }\n\n  return field;\n};","map":{"version":3,"sources":["/Users/ramchapagai/Desktop/Portfolio/ram-portfolio/node_modules/fetchye/es/queryHelpers.js"],"names":["isLoading","loading","data","numOfRenders","options","defer","coerceSsrField","field","Error","_field$toString","toString","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,SAAS,GAAG,QAKnB;AAAA,MALoB;AACxBC,IAAAA,OADwB;AAExBC,IAAAA,IAFwB;AAGxBC,IAAAA,YAHwB;AAIxBC,IAAAA;AAJwB,GAKpB;;AACJ;AACA,MAAID,YAAY,KAAK,CAArB,EAAwB;AACtB;AACA,QAAIC,OAAO,CAACC,KAAZ,EAAmB;AACjB;AACA,aAAO,KAAP;AACD,KALqB,CAKpB;;;AAGF,QAAI,CAACH,IAAL,EAAW;AACT;AACA,aAAO,IAAP;AACD;AACF,GAdG,CAcF;;;AAGF,MAAID,OAAJ,EAAa;AACX;AACA,WAAO,IAAP;AACD,GApBG,CAoBF;;;AAGF,SAAO,KAAP;AACD,CA7BM;AA8BP,OAAO,MAAMK,cAAc,GAAGC,KAAK,IAAI;AACrC,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAIA,KAAK,YAAYC,KAArB,EAA4B;AAC1B,QAAIC,eAAJ;;AAEA,WAAO,CAACA,eAAe,GAAGF,KAAK,CAACG,QAAzB,MAAuC,IAAvC,IAA+CD,eAAe,KAAK,KAAK,CAAxE,GAA4E,KAAK,CAAjF,GAAqFA,eAAe,CAACE,IAAhB,CAAqBJ,KAArB,CAA5F;AACD;;AAED,SAAOA,KAAP;AACD,CAZM","sourcesContent":["/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nexport const isLoading = ({\n  loading,\n  data,\n  numOfRenders,\n  options\n}) => {\n  // If first render\n  if (numOfRenders === 1) {\n    // and defer is true\n    if (options.defer) {\n      // isLoading should be false\n      return false;\n    } // and no data exists and presume loading state isn't present\n\n\n    if (!data) {\n      // isLoading should be true\n      return true;\n    }\n  } // If not on first render and loading from cache is true\n\n\n  if (loading) {\n    // isLoading should be true\n    return true;\n  } // else isLoading should be false\n\n\n  return false;\n};\nexport const coerceSsrField = field => {\n  if (!field) {\n    return null;\n  }\n\n  if (field instanceof Error) {\n    var _field$toString;\n\n    return (_field$toString = field.toString) === null || _field$toString === void 0 ? void 0 : _field$toString.call(field);\n  }\n\n  return field;\n};"]},"metadata":{},"sourceType":"module"}