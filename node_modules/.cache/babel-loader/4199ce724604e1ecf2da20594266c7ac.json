{"ast":null,"code":"/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nimport React, { useMemo, useReducer, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { defaultEqualityChecker, useSubscription, defaultFetcher, FetchyeContext // eslint-disable-next-line import/no-unresolved\n} from 'fetchye-core';\nimport SimpleCache from './SimpleCache';\nimport useRefReducer from './useRefReducer';\n\nconst makeUseFetchyeSelector = _ref => {\n  let {\n    fetchyeState,\n    subscribe,\n    getCacheByKey,\n    equalityChecker\n  } = _ref;\n  return key => {\n    const [, forceRender] = useReducer(n => n + 1, 0);\n    const initialValue = getCacheByKey(fetchyeState.current, key);\n    const lastSelectorValue = useRef(initialValue);\n    const selectorValue = useRef(initialValue);\n    useEffect(() => {\n      function checkForUpdates() {\n        const nextValue = getCacheByKey(fetchyeState.current, key);\n        lastSelectorValue.current = selectorValue.current;\n        selectorValue.current = nextValue;\n\n        if (equalityChecker(selectorValue.current, lastSelectorValue.current)) {\n          return;\n        }\n\n        forceRender();\n      }\n\n      checkForUpdates();\n      return subscribe(checkForUpdates);\n    }, [key]);\n    return selectorValue;\n  };\n};\n\nconst FetchyeProvider = _ref2 => {\n  let {\n    cache = SimpleCache(),\n    fetcher = defaultFetcher,\n    equalityChecker = defaultEqualityChecker,\n    fetchClient = fetch,\n    initialData = cache.reducer(undefined, {\n      type: ''\n    }),\n    children\n  } = _ref2;\n  const [notify, subscribe] = useSubscription();\n  const [fetchyeState, dispatch] = useRefReducer(cache.reducer, initialData, notify);\n  const memoizedConfig = useMemo(() => ({\n    dispatch,\n    cache,\n    defaultFetcher: fetcher,\n    useFetchyeSelector: makeUseFetchyeSelector({\n      fetchyeState,\n      subscribe,\n      getCacheByKey: cache.getCacheByKey,\n      equalityChecker\n    }),\n    fetchClient\n  }), [cache, equalityChecker, fetchClient, fetcher, subscribe, fetchyeState, dispatch]);\n  return /*#__PURE__*/React.createElement(FetchyeContext.Provider, {\n    value: memoizedConfig\n  }, children);\n};\n\nexport default FetchyeProvider;","map":{"version":3,"sources":["/Users/ramchapagai/Desktop/Portfolio/ram-portfolio/node_modules/fetchye/es/FetchyeProvider.js"],"names":["React","useMemo","useReducer","useEffect","useRef","PropTypes","defaultEqualityChecker","useSubscription","defaultFetcher","FetchyeContext","SimpleCache","useRefReducer","makeUseFetchyeSelector","fetchyeState","subscribe","getCacheByKey","equalityChecker","key","forceRender","n","initialValue","current","lastSelectorValue","selectorValue","checkForUpdates","nextValue","FetchyeProvider","cache","fetcher","fetchClient","fetch","initialData","reducer","undefined","type","children","notify","dispatch","memoizedConfig","useFetchyeSelector","createElement","Provider","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,UAAzB,EAAqCC,SAArC,EAAgDC,MAAhD,QAA8D,OAA9D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,sBAAT,EAAiCC,eAAjC,EAAkDC,cAAlD,EAAkEC,cAAlE,CAAiF;AAAjF,OACO,cADP;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,sBAAsB,GAAG;AAAA,MAAC;AAC9BC,IAAAA,YAD8B;AAE9BC,IAAAA,SAF8B;AAG9BC,IAAAA,aAH8B;AAI9BC,IAAAA;AAJ8B,GAAD;AAAA,SAKzBC,GAAG,IAAI;AACX,UAAM,GAAGC,WAAH,IAAkBhB,UAAU,CAACiB,CAAC,IAAIA,CAAC,GAAG,CAAV,EAAa,CAAb,CAAlC;AACA,UAAMC,YAAY,GAAGL,aAAa,CAACF,YAAY,CAACQ,OAAd,EAAuBJ,GAAvB,CAAlC;AACA,UAAMK,iBAAiB,GAAGlB,MAAM,CAACgB,YAAD,CAAhC;AACA,UAAMG,aAAa,GAAGnB,MAAM,CAACgB,YAAD,CAA5B;AACAjB,IAAAA,SAAS,CAAC,MAAM;AACd,eAASqB,eAAT,GAA2B;AACzB,cAAMC,SAAS,GAAGV,aAAa,CAACF,YAAY,CAACQ,OAAd,EAAuBJ,GAAvB,CAA/B;AACAK,QAAAA,iBAAiB,CAACD,OAAlB,GAA4BE,aAAa,CAACF,OAA1C;AACAE,QAAAA,aAAa,CAACF,OAAd,GAAwBI,SAAxB;;AAEA,YAAIT,eAAe,CAACO,aAAa,CAACF,OAAf,EAAwBC,iBAAiB,CAACD,OAA1C,CAAnB,EAAuE;AACrE;AACD;;AAEDH,QAAAA,WAAW;AACZ;;AAEDM,MAAAA,eAAe;AACf,aAAOV,SAAS,CAACU,eAAD,CAAhB;AACD,KAfQ,EAeN,CAACP,GAAD,CAfM,CAAT;AAgBA,WAAOM,aAAP;AACD,GA3B8B;AAAA,CAA/B;;AA6BA,MAAMG,eAAe,GAAG,SASlB;AAAA,MATmB;AACvBC,IAAAA,KAAK,GAAGjB,WAAW,EADI;AAEvBkB,IAAAA,OAAO,GAAGpB,cAFa;AAGvBQ,IAAAA,eAAe,GAAGV,sBAHK;AAIvBuB,IAAAA,WAAW,GAAGC,KAJS;AAKvBC,IAAAA,WAAW,GAAGJ,KAAK,CAACK,OAAN,CAAcC,SAAd,EAAyB;AACrCC,MAAAA,IAAI,EAAE;AAD+B,KAAzB,CALS;AAQvBC,IAAAA;AARuB,GASnB;AACJ,QAAM,CAACC,MAAD,EAAStB,SAAT,IAAsBP,eAAe,EAA3C;AACA,QAAM,CAACM,YAAD,EAAewB,QAAf,IAA2B1B,aAAa,CAACgB,KAAK,CAACK,OAAP,EAAgBD,WAAhB,EAA6BK,MAA7B,CAA9C;AACA,QAAME,cAAc,GAAGrC,OAAO,CAAC,OAAO;AACpCoC,IAAAA,QADoC;AAEpCV,IAAAA,KAFoC;AAGpCnB,IAAAA,cAAc,EAAEoB,OAHoB;AAIpCW,IAAAA,kBAAkB,EAAE3B,sBAAsB,CAAC;AACzCC,MAAAA,YADyC;AAEzCC,MAAAA,SAFyC;AAGzCC,MAAAA,aAAa,EAAEY,KAAK,CAACZ,aAHoB;AAIzCC,MAAAA;AAJyC,KAAD,CAJN;AAUpCa,IAAAA;AAVoC,GAAP,CAAD,EAW1B,CAACF,KAAD,EAAQX,eAAR,EAAyBa,WAAzB,EAAsCD,OAAtC,EAA+Cd,SAA/C,EAA0DD,YAA1D,EAAwEwB,QAAxE,CAX0B,CAA9B;AAYA,SAAO,aAAarC,KAAK,CAACwC,aAAN,CAAoB/B,cAAc,CAACgC,QAAnC,EAA6C;AAC/DC,IAAAA,KAAK,EAAEJ;AADwD,GAA7C,EAEjBH,QAFiB,CAApB;AAGD,CA3BD;;AA6BA,eAAeT,eAAf","sourcesContent":["/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nimport React, { useMemo, useReducer, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { defaultEqualityChecker, useSubscription, defaultFetcher, FetchyeContext // eslint-disable-next-line import/no-unresolved\n} from 'fetchye-core';\nimport SimpleCache from './SimpleCache';\nimport useRefReducer from './useRefReducer';\n\nconst makeUseFetchyeSelector = ({\n  fetchyeState,\n  subscribe,\n  getCacheByKey,\n  equalityChecker\n}) => key => {\n  const [, forceRender] = useReducer(n => n + 1, 0);\n  const initialValue = getCacheByKey(fetchyeState.current, key);\n  const lastSelectorValue = useRef(initialValue);\n  const selectorValue = useRef(initialValue);\n  useEffect(() => {\n    function checkForUpdates() {\n      const nextValue = getCacheByKey(fetchyeState.current, key);\n      lastSelectorValue.current = selectorValue.current;\n      selectorValue.current = nextValue;\n\n      if (equalityChecker(selectorValue.current, lastSelectorValue.current)) {\n        return;\n      }\n\n      forceRender();\n    }\n\n    checkForUpdates();\n    return subscribe(checkForUpdates);\n  }, [key]);\n  return selectorValue;\n};\n\nconst FetchyeProvider = ({\n  cache = SimpleCache(),\n  fetcher = defaultFetcher,\n  equalityChecker = defaultEqualityChecker,\n  fetchClient = fetch,\n  initialData = cache.reducer(undefined, {\n    type: ''\n  }),\n  children\n}) => {\n  const [notify, subscribe] = useSubscription();\n  const [fetchyeState, dispatch] = useRefReducer(cache.reducer, initialData, notify);\n  const memoizedConfig = useMemo(() => ({\n    dispatch,\n    cache,\n    defaultFetcher: fetcher,\n    useFetchyeSelector: makeUseFetchyeSelector({\n      fetchyeState,\n      subscribe,\n      getCacheByKey: cache.getCacheByKey,\n      equalityChecker\n    }),\n    fetchClient\n  }), [cache, equalityChecker, fetchClient, fetcher, subscribe, fetchyeState, dispatch]);\n  return /*#__PURE__*/React.createElement(FetchyeContext.Provider, {\n    value: memoizedConfig\n  }, children);\n};\n\nexport default FetchyeProvider;"]},"metadata":{},"sourceType":"module"}