{"ast":null,"code":"/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n// Object.fromEntries is not compatible with Node v10\n// provide our own lightweight solution\nexport const headersToObject = function () {\n  let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return [...headers].reduce((acc, _ref) => {\n    let [key, value] = _ref;\n    acc[key] = value;\n    return acc;\n  }, {});\n};\nexport const defaultFetcher = async (fetchClient, key, options) => {\n  let res;\n  let payload;\n  let error;\n\n  try {\n    res = await fetchClient(key, options);\n    let body = await res.text();\n\n    try {\n      body = JSON.parse(body); // eslint-disable-next-line no-empty\n    } catch (e) {// body will still be the text from the response, so no action needed here\n    }\n\n    payload = {\n      body,\n      ok: res.ok,\n      headers: headersToObject(res.headers),\n      status: res.status\n    };\n  } catch (requestError) {\n    // eslint-disable-next-line no-console\n    console.error(requestError);\n    error = requestError;\n  }\n\n  return {\n    payload,\n    error\n  };\n};\nexport default defaultFetcher;","map":{"version":3,"sources":["/Users/ramchapagai/Desktop/Portfolio/ram-portfolio/node_modules/fetchye-core/es/defaultFetcher.js"],"names":["headersToObject","headers","reduce","acc","key","value","defaultFetcher","fetchClient","options","res","payload","error","body","text","JSON","parse","e","ok","status","requestError","console"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAG;AAAA,MAACC,OAAD,uEAAW,EAAX;AAAA,SAAkB,CAAC,GAAGA,OAAJ,EAAaC,MAAb,CAAoB,CAACC,GAAD,WAAuB;AAAA,QAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;AAC1FF,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AACA,WAAOF,GAAP;AACD,GAHgD,EAG9C,EAH8C,CAAlB;AAAA,CAAxB;AAIP,OAAO,MAAMG,cAAc,GAAG,OAAOC,WAAP,EAAoBH,GAApB,EAAyBI,OAAzB,KAAqC;AACjE,MAAIC,GAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAI;AACFF,IAAAA,GAAG,GAAG,MAAMF,WAAW,CAACH,GAAD,EAAMI,OAAN,CAAvB;AACA,QAAII,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAjB;;AAEA,QAAI;AACFD,MAAAA,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP,CADE,CACuB;AAC1B,KAFD,CAEE,OAAOI,CAAP,EAAU,CAAC;AACZ;;AAEDN,IAAAA,OAAO,GAAG;AACRE,MAAAA,IADQ;AAERK,MAAAA,EAAE,EAAER,GAAG,CAACQ,EAFA;AAGRhB,MAAAA,OAAO,EAAED,eAAe,CAACS,GAAG,CAACR,OAAL,CAHhB;AAIRiB,MAAAA,MAAM,EAAET,GAAG,CAACS;AAJJ,KAAV;AAMD,GAfD,CAeE,OAAOC,YAAP,EAAqB;AACrB;AACAC,IAAAA,OAAO,CAACT,KAAR,CAAcQ,YAAd;AACAR,IAAAA,KAAK,GAAGQ,YAAR;AACD;;AAED,SAAO;AACLT,IAAAA,OADK;AAELC,IAAAA;AAFK,GAAP;AAID,CA9BM;AA+BP,eAAeL,cAAf","sourcesContent":["/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n// Object.fromEntries is not compatible with Node v10\n// provide our own lightweight solution\nexport const headersToObject = (headers = []) => [...headers].reduce((acc, [key, value]) => {\n  acc[key] = value;\n  return acc;\n}, {});\nexport const defaultFetcher = async (fetchClient, key, options) => {\n  let res;\n  let payload;\n  let error;\n\n  try {\n    res = await fetchClient(key, options);\n    let body = await res.text();\n\n    try {\n      body = JSON.parse(body); // eslint-disable-next-line no-empty\n    } catch (e) {// body will still be the text from the response, so no action needed here\n    }\n\n    payload = {\n      body,\n      ok: res.ok,\n      headers: headersToObject(res.headers),\n      status: res.status\n    };\n  } catch (requestError) {\n    // eslint-disable-next-line no-console\n    console.error(requestError);\n    error = requestError;\n  }\n\n  return {\n    payload,\n    error\n  };\n};\nexport default defaultFetcher;"]},"metadata":{},"sourceType":"module"}