{"ast":null,"code":"/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n// eslint-disable-next-line import/no-unresolved\nimport { ssrFetcher } from 'fetchye-core';\nimport SimpleCache from './SimpleCache';\nimport { runAsync } from './runAsync';\nimport { computeKey } from './computeKey';\nimport { defaultMapOptionsToKey } from './defaultMapOptionsToKey';\nimport { coerceSsrField } from './queryHelpers';\n\nconst makeServerFetchye = _ref => {\n  let {\n    cache = SimpleCache(),\n    store: {\n      getState,\n      dispatch\n    } = {},\n    fetchClient\n  } = _ref;\n  return async function (key) {\n    let {\n      mapOptionsToKey = options => options,\n      ...options\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetcher = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ssrFetcher;\n    const {\n      cacheSelector\n    } = cache;\n    const computedKey = computeKey(key, defaultMapOptionsToKey(mapOptionsToKey(options)));\n\n    if (!getState || !dispatch || !cacheSelector) {\n      const res = await runAsync({\n        dispatch: () => {},\n        computedKey,\n        fetcher,\n        fetchClient,\n        options\n      });\n      return {\n        data: coerceSsrField(res.data),\n        error: coerceSsrField(res.error)\n      };\n    }\n\n    const state = cacheSelector(getState());\n    const {\n      data,\n      loading,\n      error\n    } = cache.getCacheByKey(state, computedKey.hash);\n\n    if (!data && !error && !loading) {\n      const res = await runAsync({\n        dispatch,\n        computedKey,\n        fetcher,\n        fetchClient,\n        options\n      });\n      return {\n        data: coerceSsrField(res.data),\n        error: coerceSsrField(res.error)\n      };\n    }\n\n    return {\n      data: coerceSsrField(data),\n      error: coerceSsrField(error)\n    };\n  };\n};\n\nexport default makeServerFetchye;","map":{"version":3,"sources":["/Users/ramchapagai/Desktop/Portfolio/ram-portfolio/node_modules/fetchye/es/makeServerFetchye.js"],"names":["ssrFetcher","SimpleCache","runAsync","computeKey","defaultMapOptionsToKey","coerceSsrField","makeServerFetchye","cache","store","getState","dispatch","fetchClient","key","mapOptionsToKey","options","fetcher","cacheSelector","computedKey","res","data","error","state","loading","getCacheByKey","hash"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,cAAT,QAA+B,gBAA/B;;AAEA,MAAMC,iBAAiB,GAAG;AAAA,MAAC;AACzBC,IAAAA,KAAK,GAAGN,WAAW,EADM;AAEzBO,IAAAA,KAAK,EAAE;AACLC,MAAAA,QADK;AAELC,MAAAA;AAFK,QAGH,EALqB;AAMzBC,IAAAA;AANyB,GAAD;AAAA,SAOpB,gBAAOC,GAAP,EAG2B;AAAA,QAHf;AAChBC,MAAAA,eAAe,GAAGC,OAAO,IAAIA,OADb;AAEhB,SAAGA;AAFa,KAGe,uEAA7B,EAA6B;AAAA,QAAzBC,OAAyB,uEAAff,UAAe;AAC/B,UAAM;AACJgB,MAAAA;AADI,QAEFT,KAFJ;AAGA,UAAMU,WAAW,GAAGd,UAAU,CAACS,GAAD,EAAMR,sBAAsB,CAACS,eAAe,CAACC,OAAD,CAAhB,CAA5B,CAA9B;;AAEA,QAAI,CAACL,QAAD,IAAa,CAACC,QAAd,IAA0B,CAACM,aAA/B,EAA8C;AAC5C,YAAME,GAAG,GAAG,MAAMhB,QAAQ,CAAC;AACzBQ,QAAAA,QAAQ,EAAE,MAAM,CAAE,CADO;AAEzBO,QAAAA,WAFyB;AAGzBF,QAAAA,OAHyB;AAIzBJ,QAAAA,WAJyB;AAKzBG,QAAAA;AALyB,OAAD,CAA1B;AAOA,aAAO;AACLK,QAAAA,IAAI,EAAEd,cAAc,CAACa,GAAG,CAACC,IAAL,CADf;AAELC,QAAAA,KAAK,EAAEf,cAAc,CAACa,GAAG,CAACE,KAAL;AAFhB,OAAP;AAID;;AAED,UAAMC,KAAK,GAAGL,aAAa,CAACP,QAAQ,EAAT,CAA3B;AACA,UAAM;AACJU,MAAAA,IADI;AAEJG,MAAAA,OAFI;AAGJF,MAAAA;AAHI,QAIFb,KAAK,CAACgB,aAAN,CAAoBF,KAApB,EAA2BJ,WAAW,CAACO,IAAvC,CAJJ;;AAMA,QAAI,CAACL,IAAD,IAAS,CAACC,KAAV,IAAmB,CAACE,OAAxB,EAAiC;AAC/B,YAAMJ,GAAG,GAAG,MAAMhB,QAAQ,CAAC;AACzBQ,QAAAA,QADyB;AAEzBO,QAAAA,WAFyB;AAGzBF,QAAAA,OAHyB;AAIzBJ,QAAAA,WAJyB;AAKzBG,QAAAA;AALyB,OAAD,CAA1B;AAOA,aAAO;AACLK,QAAAA,IAAI,EAAEd,cAAc,CAACa,GAAG,CAACC,IAAL,CADf;AAELC,QAAAA,KAAK,EAAEf,cAAc,CAACa,GAAG,CAACE,KAAL;AAFhB,OAAP;AAID;;AAED,WAAO;AACLD,MAAAA,IAAI,EAAEd,cAAc,CAACc,IAAD,CADf;AAELC,MAAAA,KAAK,EAAEf,cAAc,CAACe,KAAD;AAFhB,KAAP;AAID,GAvDyB;AAAA,CAA1B;;AAyDA,eAAed,iBAAf","sourcesContent":["/*\n * Copyright 2020 American Express Travel Related Services Company, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n// eslint-disable-next-line import/no-unresolved\nimport { ssrFetcher } from 'fetchye-core';\nimport SimpleCache from './SimpleCache';\nimport { runAsync } from './runAsync';\nimport { computeKey } from './computeKey';\nimport { defaultMapOptionsToKey } from './defaultMapOptionsToKey';\nimport { coerceSsrField } from './queryHelpers';\n\nconst makeServerFetchye = ({\n  cache = SimpleCache(),\n  store: {\n    getState,\n    dispatch\n  } = {},\n  fetchClient\n}) => async (key, {\n  mapOptionsToKey = options => options,\n  ...options\n} = {}, fetcher = ssrFetcher) => {\n  const {\n    cacheSelector\n  } = cache;\n  const computedKey = computeKey(key, defaultMapOptionsToKey(mapOptionsToKey(options)));\n\n  if (!getState || !dispatch || !cacheSelector) {\n    const res = await runAsync({\n      dispatch: () => {},\n      computedKey,\n      fetcher,\n      fetchClient,\n      options\n    });\n    return {\n      data: coerceSsrField(res.data),\n      error: coerceSsrField(res.error)\n    };\n  }\n\n  const state = cacheSelector(getState());\n  const {\n    data,\n    loading,\n    error\n  } = cache.getCacheByKey(state, computedKey.hash);\n\n  if (!data && !error && !loading) {\n    const res = await runAsync({\n      dispatch,\n      computedKey,\n      fetcher,\n      fetchClient,\n      options\n    });\n    return {\n      data: coerceSsrField(res.data),\n      error: coerceSsrField(res.error)\n    };\n  }\n\n  return {\n    data: coerceSsrField(data),\n    error: coerceSsrField(error)\n  };\n};\n\nexport default makeServerFetchye;"]},"metadata":{},"sourceType":"module"}