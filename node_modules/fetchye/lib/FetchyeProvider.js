"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fetchyeCore = require("fetchye-core");

var _SimpleCache = _interopRequireDefault(require("./SimpleCache"));

var _useRefReducer = _interopRequireDefault(require("./useRefReducer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
const makeUseFetchyeSelector = ({
  fetchyeState,
  subscribe,
  getCacheByKey,
  equalityChecker
}) => key => {
  const [, forceRender] = (0, _react.useReducer)(n => n + 1, 0);
  const initialValue = getCacheByKey(fetchyeState.current, key);
  const lastSelectorValue = (0, _react.useRef)(initialValue);
  const selectorValue = (0, _react.useRef)(initialValue);
  (0, _react.useEffect)(() => {
    function checkForUpdates() {
      const nextValue = getCacheByKey(fetchyeState.current, key);
      lastSelectorValue.current = selectorValue.current;
      selectorValue.current = nextValue;

      if (equalityChecker(selectorValue.current, lastSelectorValue.current)) {
        return;
      }

      forceRender();
    }

    checkForUpdates();
    return subscribe(checkForUpdates);
  }, [key]);
  return selectorValue;
};

const FetchyeProvider = ({
  cache = (0, _SimpleCache.default)(),
  fetcher = _fetchyeCore.defaultFetcher,
  equalityChecker = _fetchyeCore.defaultEqualityChecker,
  fetchClient = fetch,
  initialData = cache.reducer(undefined, {
    type: ''
  }),
  children
}) => {
  const [notify, subscribe] = (0, _fetchyeCore.useSubscription)();
  const [fetchyeState, dispatch] = (0, _useRefReducer.default)(cache.reducer, initialData, notify);
  const memoizedConfig = (0, _react.useMemo)(() => ({
    dispatch,
    cache,
    defaultFetcher: fetcher,
    useFetchyeSelector: makeUseFetchyeSelector({
      fetchyeState,
      subscribe,
      getCacheByKey: cache.getCacheByKey,
      equalityChecker
    }),
    fetchClient
  }), [cache, equalityChecker, fetchClient, fetcher, subscribe, fetchyeState, dispatch]);
  return /*#__PURE__*/_react.default.createElement(_fetchyeCore.FetchyeContext.Provider, {
    value: memoizedConfig
  }, children);
};

var _default = FetchyeProvider;
exports.default = _default;