"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fetchyeCore = require("fetchye-core");

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
function reducer(state = {
  errors: {},
  loading: {},
  data: {}
}, action) {
  if (!action.type.startsWith(_fetchyeCore.ACTION_NAMESPACE)) {
    return state;
  }

  switch (action.type) {
    case _fetchyeCore.DELETE_DATA:
      {
        const {
          [action.hash]: deletedEntry,
          ...nextData
        } = state.data;
        return { ...state,
          data: { ...nextData
          }
        };
      }

    case _fetchyeCore.CLEAR_ERROR:
      {
        const {
          [action.hash]: deletedEntry,
          ...nextErrors
        } = state.errors;
        return { ...state,
          errors: { ...nextErrors
          }
        };
      }

    case _fetchyeCore.ERROR:
      {
        const {
          [action.hash]: deletedEntry,
          ...nextLoading
        } = state.loading;
        return { ...state,
          errors: { ...state.errors,
            [action.hash]: action.error
          },
          loading: { ...nextLoading
          }
        };
      }

    case _fetchyeCore.IS_LOADING:
      {
        return { ...state,
          loading: { ...state.loading,
            [action.hash]: action.hash
          }
        };
      }

    case _fetchyeCore.SET_DATA:
      {
        const {
          [action.hash]: deletedEntry,
          ...nextLoading
        } = state.loading;
        return { ...state,
          data: { ...state.data,
            [action.hash]: action.value
          },
          loading: { ...nextLoading
          }
        };
      }

    default:
      return state;
  }
}

const getCacheByKey = (cache = {}, key) => {
  var _cache$data, _cache$loading, _cache$errors;

  const data = (_cache$data = cache.data) === null || _cache$data === void 0 ? void 0 : _cache$data[key];
  const loading = !!((_cache$loading = cache.loading) === null || _cache$loading === void 0 ? void 0 : _cache$loading[key]);
  const error = (_cache$errors = cache.errors) === null || _cache$errors === void 0 ? void 0 : _cache$errors[key];
  return {
    data,
    loading,
    error
  };
};

function SimpleCache({
  cacheSelector = state => state
} = {}) {
  return {
    getCacheByKey,
    reducer,
    cacheSelector
  };
}

var _default = SimpleCache;
exports.default = _default;