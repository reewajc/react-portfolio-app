"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fetchyeCore = require("fetchye-core");

var _SimpleCache = _interopRequireDefault(require("./SimpleCache"));

var _runAsync = require("./runAsync");

var _computeKey = require("./computeKey");

var _defaultMapOptionsToKey = require("./defaultMapOptionsToKey");

var _queryHelpers = require("./queryHelpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
// eslint-disable-next-line import/no-unresolved
const makeServerFetchye = ({
  cache = (0, _SimpleCache.default)(),
  store: {
    getState,
    dispatch
  } = {},
  fetchClient
}) => async (key, {
  mapOptionsToKey = options => options,
  ...options
} = {}, fetcher = _fetchyeCore.ssrFetcher) => {
  const {
    cacheSelector
  } = cache;
  const computedKey = (0, _computeKey.computeKey)(key, (0, _defaultMapOptionsToKey.defaultMapOptionsToKey)(mapOptionsToKey(options)));

  if (!getState || !dispatch || !cacheSelector) {
    const res = await (0, _runAsync.runAsync)({
      dispatch: () => {},
      computedKey,
      fetcher,
      fetchClient,
      options
    });
    return {
      data: (0, _queryHelpers.coerceSsrField)(res.data),
      error: (0, _queryHelpers.coerceSsrField)(res.error)
    };
  }

  const state = cacheSelector(getState());
  const {
    data,
    loading,
    error
  } = cache.getCacheByKey(state, computedKey.hash);

  if (!data && !error && !loading) {
    const res = await (0, _runAsync.runAsync)({
      dispatch,
      computedKey,
      fetcher,
      fetchClient,
      options
    });
    return {
      data: (0, _queryHelpers.coerceSsrField)(res.data),
      error: (0, _queryHelpers.coerceSsrField)(res.error)
    };
  }

  return {
    data: (0, _queryHelpers.coerceSsrField)(data),
    error: (0, _queryHelpers.coerceSsrField)(error)
  };
};

var _default = makeServerFetchye;
exports.default = _default;