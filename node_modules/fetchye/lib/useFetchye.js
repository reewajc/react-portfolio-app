"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = require("react");

var _runAsync = require("./runAsync");

var _computeKey = require("./computeKey");

var _queryHelpers = require("./queryHelpers");

var _useFetchyeContext = require("./useFetchyeContext");

var _defaultMapOptionsToKey = require("./defaultMapOptionsToKey");

/*
 * Copyright 2020 American Express Travel Related Services Company, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
const passInitialData = (value, initialValue, numOfRenders) => numOfRenders === 1 ? value || initialValue : value;

const useFetchye = (key, {
  mapOptionsToKey = options => options,
  ...options
} = {}, fetcher) => {
  var _options$initialData2, _options$initialData3, _options$initialData4;

  const {
    defaultFetcher,
    useFetchyeSelector,
    dispatch,
    fetchClient
  } = (0, _useFetchyeContext.useFetchyeContext)();
  const selectedFetcher = typeof fetcher === 'function' ? fetcher : defaultFetcher;
  const computedKey = (0, _computeKey.computeKey)(key, (0, _defaultMapOptionsToKey.defaultMapOptionsToKey)(mapOptionsToKey(options)));
  const selectorState = useFetchyeSelector(computedKey.hash); // create a render version manager using refs

  const numOfRenders = (0, _react.useRef)(0);
  numOfRenders.current += 1;
  (0, _react.useEffect)(() => {
    var _options$initialData;

    if (options.defer || !computedKey) {
      return;
    } // If first render and initialData.data exists from SSR then return early


    if (numOfRenders.current === 1 && ((_options$initialData = options.initialData) === null || _options$initialData === void 0 ? void 0 : _options$initialData.data)) {
      return;
    }

    const {
      loading,
      data,
      error
    } = selectorState.current;

    if (!loading && !data && !error) {
      (0, _runAsync.runAsync)({
        dispatch,
        computedKey,
        fetcher: selectedFetcher,
        fetchClient,
        options
      });
    }
  });
  return {
    isLoading: (0, _queryHelpers.isLoading)({
      loading: selectorState.current.loading,
      data: selectorState.current.data || ((_options$initialData2 = options.initialData) === null || _options$initialData2 === void 0 ? void 0 : _options$initialData2.data),
      numOfRenders: numOfRenders.current,
      options
    }),
    error: passInitialData(selectorState.current.error, (_options$initialData3 = options.initialData) === null || _options$initialData3 === void 0 ? void 0 : _options$initialData3.error, numOfRenders.current),
    data: passInitialData(selectorState.current.data, (_options$initialData4 = options.initialData) === null || _options$initialData4 === void 0 ? void 0 : _options$initialData4.data, numOfRenders.current),

    run() {
      return (0, _runAsync.runAsync)({
        dispatch,
        computedKey,
        fetcher: selectedFetcher,
        fetchClient,
        options
      });
    }

  };
};

var _default = useFetchye;
exports.default = _default;